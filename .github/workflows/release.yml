# This is a basic workflow to help you get started with Actions

name: release_lldb

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache LLVM source code
        uses: actions/cache@v2
        id: cache_llvm
        env:
          cache-name: llvm_source
        with:
          path: ./llvm-project
          key: ${{ runner.os }}-source-${{env.cache-name}}
          restore-keys: ${{ runner.os }}-source-${{env.cache-name}}

      - name: clone llvm repo
        if: steps.cache_llvm.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/llvm/llvm-project.git
          ls deps/wamr_debug/build-scripts
          
      - name: patch llvm
        run: |
          cd llvm-project
          git reset --hard 4a8e6ed2f795b78061b02899aed4642bdb9cdc7e
          git config user.email "action@github.com"
          git config user.name "github action"
          git apply ../deps/wamr_debug/build-scripts/lldb-wasm.patch

      # Runs a set of commands using the runners shell
      - name: build lldb
        if: always()
        run: |
          echo "start to build lldb"
          mkdir -p build
          mkdir inst
          cd build
          cmake -DLLVM_ENABLE_PROJECTS="clang;lldb" -DLLVM_TARGETS_TO_BUILD=X86 -DCMAKE_INSTALL_PREFIX=../inst ../llvm-project/llvm
          make lldb -j8
      
      # first build may fail, we run it again
      - name: run build again
        if: always()
        run: |
          cd build
          make lldb -j4
          
      # first build may fail, we run it again
      - name: run build again and again
        if: always()
        run: |
          cd build
          make lldb -j2
          
      # first build may fail, we run it again
      - name: run build again and again and again
        if: always()
        run: |
          cd build
          make lldb
      
      - name: install lldb
        if: always()
        run: |
          cd build
          make install
          
      - name: Cache LLVM binary
        uses: actions/cache@v2
        id: cache_llvm_bin
        env:
          cache-name: llvm_bin
        with:
          path: ./build
          key: ${{ runner.os }}-build-${{env.cache-name}}
          restore-keys: ${{ runner.os }}-build-${{env.cache-name}}
        
      - name: upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ format( 'lldb-{0}', matrix.os) }}
          path: inst
          
      - name: archive binary
        run:
          tar czvf lldb-${{ runner.os }}.tar.gz inst
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ format( 'lldb-{0}.tar.gz', github.ref) }}
          draft: false
          prerelease: true
          
      - name: Publish Release Attachment
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: lldb-${{ runner.os }}.tar.gz
          asset_name: lldb-${{ runner.os }}.tar.gz
          asset_content_type: application/gzip
